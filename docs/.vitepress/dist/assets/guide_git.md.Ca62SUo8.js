import{_ as e,c as a,o as t,a1 as i}from"./chunks/framework.biRBrEtS.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/git.md","filePath":"guide/git.md","lastUpdated":1715076057000}'),s={name:"guide/git.md"},o=i('<nav class="table-of-contents"><ul><li><a href="#git工作区域">Git工作区域</a></li><li><a href="#提交规范">提交规范</a></li><li><a href="#基本指令">基本指令</a></li><li><a href="#组合指令">组合指令</a></li><li><a href="#merge-fast-forward-快转合并模式">Merge + Fast-Forward（快转合并模式）</a></li></ul></nav><h3 id="git工作区域" tabindex="-1">Git工作区域 <a class="header-anchor" href="#git工作区域" aria-label="Permalink to &quot;Git工作区域&quot;">​</a></h3><p>Git 有三个主要的工作区域：</p><ol><li>工作区（Working Directory）：你在电脑上看到的目录，用于保存项目的实际文件。</li><li>暂存区（Staging Area）：也叫索引（Index），是一个临时区域，保存了下一次提交所要包含的文件修改信息。</li><li>版本库（Repository）：工作区的一个隐藏目录 <code>.git</code>，是 Git 的核心部分，包含了项目所有的版本记录。</li></ol><p>在 Git 的工作流程中，你的修改首先会被保存在工作区，之后你需要将它们添加到暂存区以便下一次提交时可以包含这些修改。使用 <code>git add</code> 命令将修改添加到暂存区。最后，使用 <code>git commit</code> 命令将暂存区中的修改提交到版本库。</p><p>如果在工作区中对文件进行了修改，但没有使用 <code>git add</code> 命令将修改添加到暂存区，那么这些修改不会被包含在下一次提交中。</p><p>如果你已经将修改添加到了暂存区，但想要撤销暂存，也就是不将修改包含在下一次提交中，可以使用 <code>git reset</code> 命令。</p><p>如果你已经将修改提交到版本库，但后悔了这次提交，可以使用 <code>git reset</code> 或 <code>git revert</code> 命令来撤销提交。但是这两个命令的使用方式和效果略有不同。</p><h3 id="提交规范" tabindex="-1">提交规范 <a class="header-anchor" href="#提交规范" aria-label="Permalink to &quot;提交规范&quot;">​</a></h3><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scope</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">subject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">footer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>1.<code>type</code> 表示提交的类型，<code>scope</code> 表示更改的范围，<code>subject</code> 是一句简洁的描述，<code>body</code> 是更详细的描述，<code>footer</code> 则用于添加与提交相关的元数据。</p><p>2.使用规范的提交类型：提交类型应该是明确的，以便其他开发者能够轻松地理解更改的性质。以下是一些常见的提交类型：</p><ul><li><code>feat</code>：新功能</li><li><code>fix</code>：修复问题</li><li><code>docs</code>：文档更新</li><li><code>style</code>：样式更新</li><li><code>refactor</code>：重构代码</li><li><code>test</code>：测试更新</li><li><code>perf</code>:性能优化</li><li><code>chore</code>：构建过程或辅助工具的变更</li></ul><h3 id="基本指令" tabindex="-1">基本指令 <a class="header-anchor" href="#基本指令" aria-label="Permalink to &quot;基本指令&quot;">​</a></h3><h5 id="git-init-初始化一个-git-仓库。" tabindex="-1"><code>git init</code>：初始化一个 Git 仓库。 <a class="header-anchor" href="#git-init-初始化一个-git-仓库。" aria-label="Permalink to &quot;`git init`：初始化一个 Git 仓库。&quot;">​</a></h5><h5 id="git-clone-从远程仓库克隆代码到本地。" tabindex="-1"><code>git clone</code>：从远程仓库克隆代码到本地。 <a class="header-anchor" href="#git-clone-从远程仓库克隆代码到本地。" aria-label="Permalink to &quot;`git clone`：从远程仓库克隆代码到本地。&quot;">​</a></h5><h5 id="git-add-将文件添加到-git-索引中" tabindex="-1"><code>git add</code>：将文件添加到 Git 索引中 <a class="header-anchor" href="#git-add-将文件添加到-git-索引中" aria-label="Permalink to &quot;`git add`：将文件添加到 Git 索引中&quot;">​</a></h5><h5 id="git-restore-staged-文件-取消暂存" tabindex="-1"><code>git restore --staged &lt;文件&gt; </code> ：取消暂存 <a class="header-anchor" href="#git-restore-staged-文件-取消暂存" aria-label="Permalink to &quot;`git restore --staged &lt;文件&gt; ` ：取消暂存&quot;">​</a></h5><h5 id="git-restore-文件-丢弃工作区的修改" tabindex="-1"><code>git restore &lt;文件&gt;</code> ：丢弃工作区的修改 <a class="header-anchor" href="#git-restore-文件-丢弃工作区的修改" aria-label="Permalink to &quot;`git restore &lt;文件&gt;` ：丢弃工作区的修改&quot;">​</a></h5><h5 id="git-commit-提交代码更改到本地仓库。" tabindex="-1"><code>git commit</code>：提交代码更改到本地仓库。 <a class="header-anchor" href="#git-commit-提交代码更改到本地仓库。" aria-label="Permalink to &quot;`git commit`：提交代码更改到本地仓库。&quot;">​</a></h5><h5 id="git-push-将本地仓库的代码推送到远程仓库。" tabindex="-1"><code>git push</code>：将本地仓库的代码推送到远程仓库。 <a class="header-anchor" href="#git-push-将本地仓库的代码推送到远程仓库。" aria-label="Permalink to &quot;`git push`：将本地仓库的代码推送到远程仓库。&quot;">​</a></h5><h5 id="git-pull-从远程仓库拉取最新代码到本地。" tabindex="-1"><code>git pull</code>：从远程仓库拉取最新代码到本地。 <a class="header-anchor" href="#git-pull-从远程仓库拉取最新代码到本地。" aria-label="Permalink to &quot;`git pull`：从远程仓库拉取最新代码到本地。&quot;">​</a></h5><h5 id="git-branch-列出所有本地分支。" tabindex="-1"><code>git branch</code>：列出所有本地分支。 <a class="header-anchor" href="#git-branch-列出所有本地分支。" aria-label="Permalink to &quot;`git branch`：列出所有本地分支。&quot;">​</a></h5><h5 id="git-checkout-切换分支或恢复文件。" tabindex="-1"><code>git checkout</code>：切换分支或恢复文件。 <a class="header-anchor" href="#git-checkout-切换分支或恢复文件。" aria-label="Permalink to &quot;`git checkout`：切换分支或恢复文件。&quot;">​</a></h5><h5 id="git-merge-合并指定分支到当前分支。" tabindex="-1"><code>git merge</code>：合并指定分支到当前分支。 <a class="header-anchor" href="#git-merge-合并指定分支到当前分支。" aria-label="Permalink to &quot;`git merge`：合并指定分支到当前分支。&quot;">​</a></h5><h5 id="git-status-显示当前仓库的状态。" tabindex="-1"><code>git status</code>：显示当前仓库的状态。 <a class="header-anchor" href="#git-status-显示当前仓库的状态。" aria-label="Permalink to &quot;`git status`：显示当前仓库的状态。&quot;">​</a></h5><h5 id="git-log-查看提交历史。" tabindex="-1"><code>git log</code>：查看提交历史。 <a class="header-anchor" href="#git-log-查看提交历史。" aria-label="Permalink to &quot;`git log`：查看提交历史。&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git log --oneline :简洁的提交历史</span></span></code></pre></div><h5 id="git-diff-查看文件之间的差异。" tabindex="-1"><code>git diff</code>：查看文件之间的差异。 <a class="header-anchor" href="#git-diff-查看文件之间的差异。" aria-label="Permalink to &quot;`git diff`：查看文件之间的差异。&quot;">​</a></h5><h5 id="git-stash-贮藏。" tabindex="-1"><code>git stash</code>：贮藏。 <a class="header-anchor" href="#git-stash-贮藏。" aria-label="Permalink to &quot;`git stash`：贮藏。&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git stash: 将当前的修改保存到一个新的 stash 中。</span></span>\n<span class="line"><span>git stash save &quot;&lt;message&gt;&quot;: 将当前的修改保存到一个新的 stash 中，并附带一条消息。</span></span>\n<span class="line"><span>git stash list: 显示当前所有的 stash 列表。</span></span>\n<span class="line"><span>git stash apply: 应用最近的 stash，并将其保留在 stash 列表中。</span></span>\n<span class="line"><span>git stash apply stash@{n}: 应用指定的 stash，并将其保留在 stash 列表中。</span></span>\n<span class="line"><span>git stash pop: 应用最近的 stash，并将其从 stash 列表中移除。</span></span>\n<span class="line"><span>git stash pop stash@{n}: 应用指定的 stash，并将其从 stash 列表中移除。</span></span>\n<span class="line"><span>git stash drop: 移除最近的 stash，但不应用其修改。</span></span>\n<span class="line"><span>git stash drop stash@{n}: 移除指定的 stash，但不应用其修改。</span></span>\n<span class="line"><span>git stash clear: 移除所有的 stash，但不应用任何修改。</span></span>\n<span class="line"><span>git stash -m 贮藏并添加备注</span></span></code></pre></div><h5 id="git-tag-创建、列出或删除标签。" tabindex="-1"><code>git tag</code>：创建、列出或删除标签。 <a class="header-anchor" href="#git-tag-创建、列出或删除标签。" aria-label="Permalink to &quot;`git tag`：创建、列出或删除标签。&quot;">​</a></h5><h5 id="git-remote-管理远程仓库。" tabindex="-1"><code>git remote</code>：管理远程仓库。 <a class="header-anchor" href="#git-remote-管理远程仓库。" aria-label="Permalink to &quot;`git remote`：管理远程仓库。&quot;">​</a></h5><h3 id="组合指令" tabindex="-1">组合指令 <a class="header-anchor" href="#组合指令" aria-label="Permalink to &quot;组合指令&quot;">​</a></h3><h5 id="git-checkout-撤销对所有已修改但未提交-未暂存-暂存的文件无法撤销-的文件的修改-但不包括新增的文件" tabindex="-1"><code>git checkout . </code>： # 撤销对所有已修改但未提交（未暂存，暂存的文件无法撤销）的文件的修改，但不包括新增的文件 <a class="header-anchor" href="#git-checkout-撤销对所有已修改但未提交-未暂存-暂存的文件无法撤销-的文件的修改-但不包括新增的文件" aria-label="Permalink to &quot;`git checkout . `：     # 撤销对所有已修改但未提交（未暂存，暂存的文件无法撤销）的文件的修改，但不包括新增的文件&quot;">​</a></h5><h5 id="git-checkout-b-feature-创建一个名为-feature-的新分支并立即切换到该分支" tabindex="-1"><code>git checkout -b feature</code> ：创建一个名为 <code>feature</code> 的新分支并立即切换到该分支 <a class="header-anchor" href="#git-checkout-b-feature-创建一个名为-feature-的新分支并立即切换到该分支" aria-label="Permalink to &quot;`git checkout -b feature` ：创建一个名为 `feature` 的新分支并立即切换到该分支&quot;">​</a></h5><h5 id="git-push-set-upstream-origin-feature-git-push-u-origin-feature-用于将本地新建的分支-feature-推送到远程仓库-并将其与远程仓库中同名的分支建立关联关系。其中-u为-set-upstream缩写" tabindex="-1"><code>git push --set-upstream origin feature</code> === <code>git push -u origin feature</code> ：用于将本地新建的分支 <code>feature</code> 推送到远程仓库，并将其与远程仓库中同名的分支建立关联关系。其中-u为--set-upstream缩写 <a class="header-anchor" href="#git-push-set-upstream-origin-feature-git-push-u-origin-feature-用于将本地新建的分支-feature-推送到远程仓库-并将其与远程仓库中同名的分支建立关联关系。其中-u为-set-upstream缩写" aria-label="Permalink to &quot;`git push --set-upstream origin feature` === `git push -u origin feature` ：用于将本地新建的分支 `feature` 推送到远程仓库，并将其与远程仓库中同名的分支建立关联关系。其中-u为--set-upstream缩写&quot;">​</a></h5><h5 id="git-reset-回退版本" tabindex="-1"><code>git reset</code>：回退版本 <a class="header-anchor" href="#git-reset-回退版本" aria-label="Permalink to &quot;`git reset`：回退版本&quot;">​</a></h5><p><code>git reset</code>： 命令用于将当前分支的 HEAD 指针重置为指定的提交，同时将暂存区和工作区的文件恢复到重置后的状态。</p><p>具体用法如下：</p><blockquote><ul><li><p><code>git reset</code>: 把所有已暂存的文件恢复到未暂存的状态。此时你可以使用 <code>git status</code> 命令查看文件状态，确认文件已恢复到未暂存状态。</p></li><li><p><code>git reset &lt;commit&gt;</code>：将 HEAD 指针重置为指定的提交，不影响暂存区和工作区的文件；</p></li></ul><p>解释一：</p><ul><li><code>git reset --soft &lt;commit&gt;</code>：将 HEAD 指针重置为指定的提交，同时将暂存区的文件恢复到重置后的状态，但不影响工作区的文件；—— 就是重置后将当前版本之后的改动添加到暂存区 重置commit -&gt; 保留暂存区</li><li><code>git reset --mixed &lt;commit&gt;</code>：将 HEAD 指针重置为指定的提交，同时将暂存区和工作区的文件恢复到重置后的状态；—— 就是在soft的基础上将暂存区的文件恢复到未暂存状态 重置commit -&gt; 重置暂存区 -&gt; 保留未暂存区（工作区）</li><li><code>git reset --hard &lt;commit&gt;</code>：将 HEAD 指针重置为指定的提交，同时将暂存区和工作区的文件恢复到重置后的状态，并且不可恢复地清除之前的提交记录。——就是没有保留本版本之后的状态，重置工作区</li></ul><p>解释二：</p><ul><li><code>git reset --soft commit</code>：重置 HEAD 指针为指定提交，但是不重置暂存区和工作区。也就是说，之前 <code>git commit</code> 的内容会被撤销，但是暂存区和工作区的修改都会被保留。</li><li><code>git reset --mixed commit</code>：重置 HEAD 指针和暂存区为指定提交，但是不重置工作区。也就是说，之前 <code>git add</code> 的内容会被撤销，但是不会删除工作区修改的内容。</li><li><code>git reset --hard commit</code>：重置 HEAD 指针、暂存区和工作区为指定提交，也就是彻底撤销之前的提交，包括之前的 <code>git add</code> 和 <code>git commit</code>。</li></ul><p>因此，<code>--mixed</code> 选项会重置暂存区，而 <code>--hard</code> 选项会重置工作区和暂存区。而 <code>--soft</code> 选项不会重置暂存区和工作区，只是撤销之前的提交。</p></blockquote><p>在实际应用中，<code>git reset</code> 常用于撤销某些提交，并将之后的提交合并到一个新的提交中，以清除不必要的历史记录。</p><p><code>git reset commit</code> 和 <code>git reset --mixed commit</code> 是等效的。如果不指定 <code>--mixed</code>、<code>--soft</code> 或 <code>--hard</code> 参数，则默认使用 <code>--mixed</code> 参数。<code>--mixed</code> 参数会将 Git 仓库中的 HEAD 指针和暂存区同时重置为指定提交，但不会改变工作区，也就是不会修改实际文件。因此，这个操作会撤销上一次的 <code>git add</code> 操作，但不会丢失修改。</p><p>所以，下面两个命令是等效的：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git reset commit</span></span>\n<span class="line"><span>git reset --mixed commit</span></span></code></pre></div><h5 id="git-revert-撤销提交" tabindex="-1"><code>git revert</code>：撤销提交 <a class="header-anchor" href="#git-revert-撤销提交" aria-label="Permalink to &quot;`git revert`：撤销提交&quot;">​</a></h5><p><code>git revert</code> 命令用于创建一个新的提交，该提交的内容与指定的提交相反，即撤销指定提交的修改。</p><p>具体用法如下：</p><ul><li><code>git revert &lt;commit&gt;</code>：撤销指定提交的修改，并创建一个新的提交。</li></ul><p><code>git revert</code> 命令实际上是通过创建新的提交来撤销之前的提交，因此它不会改变已有的提交历史记录，也不会影响其他人的工作。但是，由于需要创建新的提交，因此会增加提交历史记录的复杂度。</p><h5 id="git-revert命令用于撤销之前的提交-它会创建一个新的提交来撤销指定的提交内容。关于同文件和不同文件的区别-让我为您解释一下" tabindex="-1"><code>git revert</code>命令用于撤销之前的提交，它会创建一个新的提交来撤销指定的提交内容。关于同文件和不同文件的区别，让我为您解释一下： <a class="header-anchor" href="#git-revert命令用于撤销之前的提交-它会创建一个新的提交来撤销指定的提交内容。关于同文件和不同文件的区别-让我为您解释一下" aria-label="Permalink to &quot;`git revert`命令用于撤销之前的提交，它会创建一个新的提交来撤销指定的提交内容。关于同文件和不同文件的区别，让我为您解释一下：&quot;">​</a></h5><ol><li><strong>同文件的情况：</strong> 当您使用<code>git revert</code>来撤销某个提交，而且这个提交修改了一个或多个文件，<code>git revert</code>会尝试将被撤销提交中所做的更改还原到当前分支中。这意味着，被撤销的文件将回到之前提交的状态，但是这个过程会在一个新的提交中进行。如果您在之前的提交中修改了文件A，并且使用<code>git revert</code>来撤销这个提交，那么文件A将被还原到之前的状态，并且会创建一个新的提交来记录这次还原。</li><li><strong>不同文件的情况：</strong> 如果您的历史中包含了多个提交，其中有些修改了文件A，而其他提交修改了文件B，C等等，如果您使用<code>git revert</code>来撤销一个修改文件A的提交，那么只有文件A会被还原到之前的状态，并且会创建一个新的提交。其他文件（如B、C等）不会受到影响，它们的状态不会改变。</li></ol><p>总之，<code>git revert</code>是一个非破坏性的操作，它通过创建新的提交来撤销指定的提交，因此您可以在不影响其他开发者或分支的情况下撤销变更。如果您想撤销多个提交，您可以按照需要多次使用<code>git revert</code>命令。</p><h3 id="merge-fast-forward-快转合并模式" tabindex="-1">Merge + <strong>Fast-Forward</strong>（快转合并模式） <a class="header-anchor" href="#merge-fast-forward-快转合并模式" aria-label="Permalink to &quot;Merge + **Fast-Forward**（快转合并模式）&quot;">​</a></h3><h5 id="快转合并的要求" tabindex="-1">**快转合并的要求 ** <a class="header-anchor" href="#快转合并的要求" aria-label="Permalink to &quot;**快转合并的要求 **&quot;">​</a></h5><p>Fast-Forward 合并是一种特殊的合并情况，在这种情况下，Git 可以直接将目标分支移动到要合并的分支的最新提交上，而不需要创建新的合并提交。要执行 Fast-Forward 合并，需要满足以下要求：</p><ol><li>目标分支与要合并的分支之间没有新的提交： 如果目标分支（通常是主分支）和要合并的分支之间没有新的提交，即目标分支不落后于要合并的分支，那么就可以执行 Fast-Forward 合并。</li><li>要合并的分支是目标分支的直接上游分支： 要合并的分支（通常是特性分支）必须是目标分支的直接上游分支。也就是说，要合并的分支是从目标分支分出来的，没有经过其他分支的合并。</li></ol><p>如果满足了以上两个要求，Git 将会执行 Fast-Forward 合并，直接将目标分支指向要合并的分支的最新提交，从而完成合并操作。这种合并方式可以保持分支历史记录的整洁和简单，因为不会产生额外的合并提交。</p><p><strong>示例1：满足 Fast-Forward 合并条件</strong></p><p>假设有两个分支：<code>main</code> 分支和 <code>feature</code> 分支。</p><ul><li><code>main</code> 分支是目标分支，它是我们要将修改合并到的分支。</li><li><code>feature</code> 分支是要合并的分支，它包含了我们在开发过程中所做的修改。</li></ul><p>假设在执行合并操作之前，<code>main</code> 分支和 <code>feature</code> 分支的提交历史如下：</p><div class="language-mathematica vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mathematica</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>main 分支:    A --- B (HEAD)</span></span>\n<span class="line"><span>                </span></span>\n<span class="line"><span>feature 分支:        \\</span></span>\n<span class="line"><span>                      C --- D (HEAD)</span></span></code></pre></div><p>在这种情况下，如果 <code>main</code> 分支和 <code>feature</code> 分支之间没有新的提交，且 <code>feature</code> 分支是从 <code>main</code> 分支分出来的，那么满足 Fast-Forward 合并条件。此时执行合并操作，Git 将直接将 <code>main</code> 分支指向 <code>feature</code> 分支的最新提交，不需要创建新的合并提交：</p><div class="language-mathematica vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mathematica</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>main 分支:    A --- B --- C --- D (HEAD)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>feature 分支:                \\</span></span>\n<span class="line"><span>                              C --- D</span></span></code></pre></div><p><strong>示例2：不满足 Fast-Forward 合并条件</strong></p><p>继续以上示例，如果在执行合并操作之前，<code>main</code> 分支有新的提交，那么就不再满足 Fast-Forward 合并的条件了。</p><p>假设此时 <code>main</code> 分支的提交历史如下：</p><div class="language-mathematica vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mathematica</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>main 分支:    A --- B --- E (HEAD)</span></span>\n<span class="line"><span>                </span></span>\n<span class="line"><span>feature 分支:        \\</span></span>\n<span class="line"><span>                      C --- D</span></span></code></pre></div><p>在这种情况下，<code>main</code> 分支和 <code>feature</code> 分支之间有新的提交 <code>E</code>，因此不满足 Fast-Forward 合并的条件。此时无法直接将 <code>main</code> 分支指向 <code>feature</code> 分支的最新提交，需要创建一个新的合并提交来整合两个分支的修改。</p><div class="language-mathematica vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mathematica</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>main 分支:    A --- B --- E --- M (HEAD)</span></span>\n<span class="line"><span>                           /       \\</span></span>\n<span class="line"><span>feature 分支:             C --- D ---/</span></span></code></pre></div>',71),c=[o];function d(n,l,r,p,h,g){return t(),a("div",null,c)}const k=e(s,[["render",d]]);export{m as __pageData,k as default};
